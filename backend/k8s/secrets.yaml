# NOTE: This is a template file. In production, secrets should be managed
# using proper secret management tools like HashiCorp Vault, AWS Secrets Manager,
# or Kubernetes external-secrets-operator.

apiVersion: v1
kind: Secret
metadata:
  name: ai-professor-secrets
  namespace: ai-professor-verse
type: Opaque
stringData:
  # Database Passwords
  POSTGRES_PASSWORD: "your-secure-postgres-password"
  REDIS_PASSWORD: "your-secure-redis-password"
  NEO4J_PASSWORD: "your-secure-neo4j-password"
  
  # JWT Secrets
  JWT_SECRET: "your-super-secure-jwt-secret-key-at-least-32-characters-long"
  SESSION_SECRET: "your-super-secure-session-secret-key"
  ENCRYPTION_KEY: "your-32-character-encryption-key"
  
  # OAuth Secrets
  GOOGLE_CLIENT_SECRET: "your-google-oauth-client-secret"
  GITHUB_CLIENT_SECRET: "your-github-oauth-client-secret"
  
  # AI API Keys
  OPENAI_API_KEY: "your-openai-api-key"
  HUGGINGFACE_API_KEY: "your-huggingface-api-key"
  
  # AWS Credentials
  AWS_ACCESS_KEY_ID: "your-aws-access-key-id"
  AWS_SECRET_ACCESS_KEY: "your-aws-secret-access-key"
  
  # Email Configuration
  SMTP_USER: "your-smtp-username"
  SMTP_PASS: "your-smtp-password"
  
  # External Service Keys
  FIREBASE_PRIVATE_KEY: "your-firebase-private-key"
  VAPID_PRIVATE_KEY: "your-vapid-private-key"
  
  # Message Queue Credentials
  RABBITMQ_DEFAULT_USER: "admin"
  RABBITMQ_DEFAULT_PASS: "your-secure-rabbitmq-password"
  
  # Monitoring & Observability
  GRAFANA_API_KEY: "your-grafana-api-key"
  
  # Keycloak
  KEYCLOAK_ADMIN_PASSWORD: "your-secure-keycloak-admin-password"
  KEYCLOAK_CLIENT_SECRET: "your-keycloak-client-secret"

---
apiVersion: v1
kind: Secret
metadata:
  name: ai-professor-secrets-staging
  namespace: ai-professor-verse-staging
type: Opaque
stringData:
  # Database Passwords (staging)
  POSTGRES_PASSWORD: "staging-postgres-password"
  REDIS_PASSWORD: "staging-redis-password"
  NEO4J_PASSWORD: "staging-neo4j-password"
  
  # JWT Secrets (staging)
  JWT_SECRET: "staging-jwt-secret-key-different-from-production"
  SESSION_SECRET: "staging-session-secret-key"
  ENCRYPTION_KEY: "staging-32-character-encryption-key"
  
  # OAuth Secrets (staging)
  GOOGLE_CLIENT_SECRET: "staging-google-oauth-client-secret"
  GITHUB_CLIENT_SECRET: "staging-github-oauth-client-secret"
  
  # AI API Keys (staging - can use same keys with rate limiting)
  OPENAI_API_KEY: "your-openai-api-key"
  HUGGINGFACE_API_KEY: "your-huggingface-api-key"
  
  # AWS Credentials (staging)
  AWS_ACCESS_KEY_ID: "staging-aws-access-key-id"
  AWS_SECRET_ACCESS_KEY: "staging-aws-secret-access-key"
  
  # Email Configuration (staging)
  SMTP_USER: "staging-smtp-username"
  SMTP_PASS: "staging-smtp-password"
  
  # External Service Keys (staging)
  FIREBASE_PRIVATE_KEY: "staging-firebase-private-key"
  VAPID_PRIVATE_KEY: "staging-vapid-private-key"
  
  # Message Queue Credentials (staging)
  RABBITMQ_DEFAULT_USER: "admin"
  RABBITMQ_DEFAULT_PASS: "staging-rabbitmq-password"
  
  # Monitoring & Observability (staging)
  GRAFANA_API_KEY: "staging-grafana-api-key"
  
  # Keycloak (staging)
  KEYCLOAK_ADMIN_PASSWORD: "staging-keycloak-admin-password"
  KEYCLOAK_CLIENT_SECRET: "staging-keycloak-client-secret"

---
# TLS Certificate Secret (for HTTPS)
apiVersion: v1
kind: Secret
metadata:
  name: ai-professor-tls
  namespace: ai-professor-verse
type: kubernetes.io/tls
data:
  # Base64 encoded certificate and key
  # Replace with your actual certificate data
  tls.crt: LS0tLS1CRUdJTi... # Your certificate here
  tls.key: LS0tLS1CRUdJTi... # Your private key here

---
# Docker Registry Secret (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: ai-professor-verse
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5leGFtcGxlLmNvbSI6eyJ1c2VybmFtZSI6InVzZXIiLCJwYXNzd29yZCI6InBhc3MiLCJhdXRoIjoiZFhObGNqcHdZWE56In19fQ==
